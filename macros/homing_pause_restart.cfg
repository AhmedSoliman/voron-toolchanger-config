# Conditional G28 (home if not already homed)
[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro _CQGL]
gcode:
    _STATUS_LEVELING
    {% if printer.quad_gantry_level.applied == False %}
        _STATUS_CALIBRATING_Z
        QUAD_GANTRY_LEVEL
        G28 Z
    {% endif %}

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    _STATUS_HOMING
    _CG28                      ; Home if not homed to get everything turned on
    _CQGL                    ; Quad Gantry Level
    _STATUS_READY

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}  ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0   ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE    ; save current print position for resume                
        BASE_PAUSE ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91 ; relative positioning
            G1 Z{z} F900   ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") } ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90     ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK   ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0 ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200  ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        _STATUS_BUSY
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true
  #{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
  #  _TOOLHEAD_PARK_PAUSE_CANCEL
  #{% endif %}
  SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
  G92 E0                         ; zero the extruder
  G90                                      ; absolute positioning
  {% if printer.extruder.temperature >= 170 %}
      G1 E-10.0 F3600                 ; retract filament
  {% endif %}
  PARKREAR
  #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                          ; disable filament sensor
  TURN_OFF_HEATERS
  #M106 S0
  CANCEL_PRINT_BASE
  _TURN_OFF_ALL_LEDS
  M117 Print Cancelled!
