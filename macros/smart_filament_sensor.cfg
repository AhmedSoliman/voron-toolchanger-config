#################################################################################################################
################################# Orbiter Sensor CONFIGURATION ##################################################
#################################################################################################################

# modified by @asoli (github.com/AhmedSoliman) to support toolchanger
# based on https://github.com/RobertLorincz/Orbiter-2-Smart-Sensor/blob/21d5f7cbb7adb2efd82a04d742477a972f35da0d/Klipper%20Config/Orbiter2_SmartSensor.cfg

# Don't forget:
# [tool SHTT2]
# params_has_filament_sensor: True
#
#################################################################################################################
################################# CHANGE HERE MACRO CONFIGURABLES################################################
#################################################################################################################

[gcode_macro _SENSOR_VARIABLES]         # change here macro configurables, enable disable functions!*************************
variable_filament_load_temp     :235    # temperature to heat up hotend for filament loading, default is 235
variable_filament_unload_temp   :185    # temperature to heat up hotend for filament un-loading, default is 185
variable_filament_load_min_temp :190    # minimum hotend set temperature allowed in filament load macro, default is 190
variable_nozzle_purge_length    :200    # filament extrude amount during load sequenc, hotend purge from old filament, default is 200
variable_nozzle_purge_speed     :300    # filament extrude speed in mm/min adjust this value lower if flow is too high and extruder skips during loading, default is 300
variable_unload_distance        :100     # filament retract distance for unload procedure. this length shall be long enough to extract the filament above the drive gears
variable_disable_autoload       :False  # disable filament autoload feature by setting this variable True
variable_disable_tangle         :False  # disable tangle by setting this variable True
variable_disable_autounload     :False  # disable auto unload filament by setting this variable to True
variable_enable_beep            :False   # uses M300 sound feature, set it True to enable
gcode:


[respond]
default_type: echo

[gcode_macro _FILAMENT_LOAD_INIT]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  {% if (printer.print_stats.state != "printing") %}
    {% if(sensor.disable_autoload|lower == 'false') %}
      SET_GCODE_VARIABLE MACRO=_UNLOAD_TANGLE_INIT VARIABLE=loadbusy VALUE=1
      LOAD_FILAMENT TOOL={params.TOOL}
    {% else %}
    M118 Filament auto-load is disabled in the config file!
    {% endif %}
  {% else %}
    M118 Printing! Can't load filament right now!
  {% endif %}

[gcode_macro LOAD_FILAMENT]
description: Unload filament, TOOL=2
variable_USER_TEMP: 0
variable_LOAD_TEMP: 0
gcode:    
    {% set start_extruder = printer.toolhead.extruder %}
    {% set tool_nr = params.TOOL|default(printer.tool_probe_endstop.active_tool_number)|int  %}
    {% set toolname = printer.toolchanger.tool_names[tool_nr] %}
    {% set extruder_name = printer[toolname].extruder %}

    {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
      {% set USER_TEMP = printer[extruder_name].target %} # save user set temperature before loading
      {% set LOAD_TEMP = 0 %} 
        {% if (printer[extruder_name].can_extrude|lower != 'true') or (printer[extruder_name].target < sensor.filament_load_min_temp) %} # checking for minimum extrusion temperature
        # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)                        
          SET_HEATER_TEMPERATURE HEATER={extruder_name} TARGET={sensor.filament_load_temp} # set user defined load temperature
          {% set LOAD_TEMP = sensor.filament_load_temp %} # save user set temperature before loading           
         M118 Hotend heating T{tool_nr}! 
        {% endif %}     
    {% if (sensor.enable_beep|lower == 'true') %} 
      M300 # beep sound
    {% endif %}
    M118 Filament loading in T{tool_nr}!  
    ACTIVATE_EXTRUDER EXTRUDER={extruder_name}
    M82           #set extruder to absolute mode
    G92 E0
    G4 P1500        # wait for 1.5 seconds
    FORCE_MOVE STEPPER={extruder_name} DISTANCE=15 VELOCITY=10 ACCEL=1000  # load filament inside the gears force move needs to be enabled    
    TEMPERATURE_WAIT SENSOR={extruder_name} MINIMUM={LOAD_TEMP} # wait for reaching set temperature    
    TEMPERATURE_WAIT SENSOR={extruder_name} MINIMUM={USER_TEMP} # wait for reaching set temperature    
    G1 E{sensor.nozzle_purge_length} F{sensor.nozzle_purge_speed} # extrude preconfigured purge length
    M400 # wait to complete nozzle purge
    SET_HEATER_TEMPERATURE HEATER={extruder_name} TARGET={USER_TEMP} # restore user temp if it was set before loading
    M400 # wait to complete unload
    ACTIVATE_EXTRUDER EXTRUDER={start_extruder}
    M118 Filament load complete!   
    UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2
 

#############################################END filament auto load macro section END***********************************************************
#############################################filament auto unload and Tangle macro section*****************************************************************
[gcode_macro _UNLOAD_TANGLE_INIT]
variable_loadbusy: 0
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  {% if (printer.print_stats.state == "printing") %} # filament tangle detection during printing  
    {% if(sensor.disable_tangle|lower == 'false') %} # run tangle detection macro if enabled
      _FILAMENT_TANGLE
    {% else %} #filament tangle disabled send message to console
      M118 Filament tangle detected, action disabled!
    {% endif %} 
  {% else %} #filament unload button pressed
      {% if (printer.print_stats.state != "paused" and loadbusy == 0) %} #enable unload if not printing and not paused
        {% if(sensor.disable_autounload|lower == 'false') %} # run unload macro if enabled
          UNLOAD_FILAMENT TOOL={params.TOOL}
        {% endif %}
      {% endif %}
  {% endif %}

[gcode_macro UNLOAD_FILAMENT] 
description: Unload filament, TOOL=2
#variable_filamentpresent: 0
gcode:
    {% set start_extruder = printer.toolhead.extruder %}
    {% if params.TOOL is defined %} #enable unload if not printing and not paused
      {% set tool_nr = params.TOOL|int %}
    {% else %}
      {% set tool_nr = printer.tool_probe_endstop.active_tool_number %}
    {% endif %}
    {% set toolname = printer.toolchanger.tool_names[tool_nr] %}
    {% set extruder_name = printer[toolname].extruder %}
    {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
      {% if (sensor.enable_beep|lower == 'true') %} 
        M300 # beep sound
      {% endif %}
      M118 Unloading T{tool_nr}!    
      {% if (printer[extruder_name].can_extrude|lower != 'true')%} # checing for minimum extrusion temperature
        # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)
        M118 Hotend heating!          
        SET_HEATER_TEMPERATURE HEATER={extruder_name} TARGET={sensor.filament_unload_temp} # restore user temp if it was set before loading
        TEMPERATURE_WAIT SENSOR={extruder_name} MINIMUM={sensor.filament_unload_temp} # wait for reaching configured unload temperature
      {% endif %}
      {% if(printer[extruder_name].target == 0) %} # checing for set temperature if is zero than set to 185 / hotend hot but cooling due to set target temp 0
        TEMPERATURE_WAIT SENSOR={extruder_name} MINIMUM={sensor.filament_unload_temp} # wait for reaching configured unload temperature
      {% endif %}
      ACTIVATE_EXTRUDER EXTRUDER={extruder_name}
      M83
      G92 E0     
      G0 E10 F500 # extruder 20mm of filament before extracting 
      G0 E-5 F3600 #extract filament to cold end
      G4 P2000 # wait for two seconds
      G0 E6 F3600 # push the filament back 
      G0 E-10 F3600 #extract filament to cold end
      G0 E-{sensor.unload_distance} F300 # continue extraction slow allow filament to be cooled enough before reaches the gears  
      M104 S0 T{tool_nr}
      M400 # wait to complete unload
      ACTIVATE_EXTRUDER EXTRUDER={start_extruder}
      M118 Filament unload complete!    

[gcode_macro _FILAMENT_TANGLE] 
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  M118 Filament tangle detected, print paused!
  {% if (sensor.enable_beep|lower == 'true') %} 
    M300 # beep sound
  {% endif %}
  PAUSE

#############################################END filament auto unload macro section END***********************************************************

[delayed_gcode clear_loadbusy]
gcode:
  SET_GCODE_VARIABLE MACRO=_UNLOAD_TANGLE_INIT VARIABLE=loadbusy VALUE=0
